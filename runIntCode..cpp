//
// Created by Chris Hartman on 12/9/19.
//
#include "Intcode.hpp"

#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <tuple>
#include <utility>
#include <vector>
using std::abs;
using std::ceil;
using std::cout;
using std::endl;
using std::forward_as_tuple;
using std::ifstream;
using std::initializer_list;
using std::istream;
using std::istringstream;
using std::map;
using std::max;
using std::max_element;
using std::min;
using std::pair;
using std::queue;
using std::set;
using std::sqrt;
using std::string;
using std::swap;
using std::tie;
using std::tuple;
using std::vector;

#include <utility>
void foo();
void quineInt();
void day2Int();
void day5Int(std::initializer_list<long long> input);
void day9Int(std::initializer_list<long long> input);

void output(long long n) { cout << n << endl; }

void foo() {
  //    std::istringstream
  //    quine("109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99");
  //    Intcode q(quine);
  //    q.compile();

  //  ifstream code("../day2.txt");
  //  Intcode icode(code);
  //  icode.compile();

  //  ifstream code("../day5.txt");
  //  Intcode icode(code);
  //  icode.compile();

  std::ifstream code("../day9.txt");
  Intcode icode(code);
  icode.compile();

  //  std::istringstream fibin("3,100,"
  //                           "109,101,"
  //                           "150,9,"
  //                           "4,102,"
  //                           "99,"
  //                           "21201,-2,0,0,"
  //                           "1206,0,31,"
  //                           "21201,0,-1,0,"
  //                           "109,1,"
  //                           "150,9,"
  //                           "109,-1,"
  //                           "22202,-2,2,0,"
  //                           "51,"
  //                           "21101,0,1,0,"
  //                           "51");
  //  Intcode fib(fibin);
  //  fib.compile();
  //  std::cout << fib.run({0}).second << "\n";
  //  fib.reset();
  //  std::cout << fib.run({1}).second << "\n";
  //  fib.reset();
  //  std::cout << fib.run({6}).second << "\n";
}
// difference between run and continue
// single step and dump memory

void quineInt() {
  map<long long, long long> p;
  long long rp = 0;

  p[0] = 109;
  p[1] = 1;
  p[2] = 204;
  p[3] = -1;
  p[4] = 1001;
  p[5] = 100;
  p[6] = 1;
  p[7] = 100;
  p[8] = 1008;
  p[9] = 100;
  p[10] = 16;
  p[11] = 101;
  p[12] = 1006;
  p[13] = 101;
  p[14] = 0;
  p[15] = 99;
label000:
  rp += 1;
label002:
  output(p[rp - 1]);
label004:
  p[100] += 1;
label008:
  p[101] = (p[100] == 16) ? 1 : 0;
label012:
  if (p[101] == 0)
    goto label000;
label015:
  return; // HALT
}

void day2Int() {
  map<long long, long long> p;
  long long rp = 0;
  p[0] = 1;
  p[1] = 12;
  p[2] = 2;
  p[3] = 3;
  p[4] = 1;
  p[5] = 1;
  p[6] = 2;
  p[7] = 3;
  p[8] = 1;
  p[9] = 3;
  p[10] = 4;
  p[11] = 3;
  p[12] = 1;
  p[13] = 5;
  p[14] = 0;
  p[15] = 3;
  p[16] = 2;
  p[17] = 6;
  p[18] = 1;
  p[19] = 19;
  p[20] = 1;
  p[21] = 19;
  p[22] = 10;
  p[23] = 23;
  p[24] = 2;
  p[25] = 13;
  p[26] = 23;
  p[27] = 27;
  p[28] = 1;
  p[29] = 5;
  p[30] = 27;
  p[31] = 31;
  p[32] = 2;
  p[33] = 6;
  p[34] = 31;
  p[35] = 35;
  p[36] = 1;
  p[37] = 6;
  p[38] = 35;
  p[39] = 39;
  p[40] = 2;
  p[41] = 39;
  p[42] = 9;
  p[43] = 43;
  p[44] = 1;
  p[45] = 5;
  p[46] = 43;
  p[47] = 47;
  p[48] = 1;
  p[49] = 13;
  p[50] = 47;
  p[51] = 51;
  p[52] = 1;
  p[53] = 10;
  p[54] = 51;
  p[55] = 55;
  p[56] = 2;
  p[57] = 55;
  p[58] = 10;
  p[59] = 59;
  p[60] = 2;
  p[61] = 10;
  p[62] = 59;
  p[63] = 63;
  p[64] = 1;
  p[65] = 9;
  p[66] = 63;
  p[67] = 67;
  p[68] = 2;
  p[69] = 67;
  p[70] = 13;
  p[71] = 71;
  p[72] = 1;
  p[73] = 71;
  p[74] = 6;
  p[75] = 75;
  p[76] = 2;
  p[77] = 6;
  p[78] = 75;
  p[79] = 79;
  p[80] = 1;
  p[81] = 5;
  p[82] = 79;
  p[83] = 83;
  p[84] = 2;
  p[85] = 83;
  p[86] = 9;
  p[87] = 87;
  p[88] = 1;
  p[89] = 6;
  p[90] = 87;
  p[91] = 91;
  p[92] = 2;
  p[93] = 91;
  p[94] = 6;
  p[95] = 95;
  p[96] = 1;
  p[97] = 95;
  p[98] = 6;
  p[99] = 99;
  p[100] = 2;
  p[101] = 99;
  p[102] = 13;
  p[103] = 103;
  p[104] = 1;
  p[105] = 6;
  p[106] = 103;
  p[107] = 107;
  p[108] = 1;
  p[109] = 2;
  p[110] = 107;
  p[111] = 111;
  p[112] = 1;
  p[113] = 111;
  p[114] = 9;
  p[115] = 0;
  p[116] = 99;
  p[117] = 2;
  p[118] = 14;
  p[119] = 0;
  p[120] = 0;
label000:
  p[3] = p[0] + p[0];
label004:
  p[3] = p[1] + p[2];
label008:
  p[3] += p[4];
label012:
  p[3] = p[5] + p[0];
label016:
  p[19] = p[6] * p[1];
label020:
  p[23] = p[19] + p[10];
label024:
  p[27] = p[13] * p[23];
label028:
  p[31] = p[5] + p[27];
label032:
  p[35] = p[6] * p[31];
label036:
  p[39] = p[6] + p[35];
label040:
  p[43] = p[39] * p[9];
label044:
  p[47] = p[5] + p[43];
label048:
  p[51] = p[13] + p[47];
label052:
  p[55] = p[10] + p[51];
label056:
  p[59] = p[55] * p[10];
label060:
  p[63] = p[10] * p[59];
label064:
  p[67] = p[9] + p[63];
label068:
  p[71] = p[67] * p[13];
label072:
  p[75] = p[71] + p[6];
label076:
  p[79] = p[6] * p[75];
label080:
  p[83] = p[5] + p[79];
label084:
  p[87] = p[83] * p[9];
label088:
  p[91] = p[6] + p[87];
label092:
  p[95] = p[91] * p[6];
label096:
  p[99] = p[95] + p[6];
label100:
  p[103] = p[99] * p[13];
label104:
  p[107] = p[6] + p[103];
label108:
  p[111] = p[2] + p[107];
label112:
  p[0] = p[111] + p[9];
  output(p[0]);
label116:
  return; // HALT
label117:
  p[0] *= p[14];
}

void day5Int(std::initializer_list<long long> input) {
  map<long long, long long> p;
  long long rp = 0;
  auto in = input.begin();
  p[0] = 3;
  p[1] = 225;
  p[2] = 1;
  p[3] = 225;
  p[4] = 6;
  p[5] = 6;
  p[6] = 1100;
  p[7] = 1;
  p[8] = 238;
  p[9] = 225;
  p[10] = 104;
  p[11] = 0;
  p[12] = 1102;
  p[13] = 27;
  p[14] = 28;
  p[15] = 225;
  p[16] = 1;
  p[17] = 113;
  p[18] = 14;
  p[19] = 224;
  p[20] = 1001;
  p[21] = 224;
  p[22] = -34;
  p[23] = 224;
  p[24] = 4;
  p[25] = 224;
  p[26] = 102;
  p[27] = 8;
  p[28] = 223;
  p[29] = 223;
  p[30] = 101;
  p[31] = 7;
  p[32] = 224;
  p[33] = 224;
  p[34] = 1;
  p[35] = 224;
  p[36] = 223;
  p[37] = 223;
  p[38] = 1102;
  p[39] = 52;
  p[40] = 34;
  p[41] = 224;
  p[42] = 101;
  p[43] = -1768;
  p[44] = 224;
  p[45] = 224;
  p[46] = 4;
  p[47] = 224;
  p[48] = 1002;
  p[49] = 223;
  p[50] = 8;
  p[51] = 223;
  p[52] = 101;
  p[53] = 6;
  p[54] = 224;
  p[55] = 224;
  p[56] = 1;
  p[57] = 223;
  p[58] = 224;
  p[59] = 223;
  p[60] = 1002;
  p[61] = 187;
  p[62] = 14;
  p[63] = 224;
  p[64] = 1001;
  p[65] = 224;
  p[66] = -126;
  p[67] = 224;
  p[68] = 4;
  p[69] = 224;
  p[70] = 102;
  p[71] = 8;
  p[72] = 223;
  p[73] = 223;
  p[74] = 101;
  p[75] = 2;
  p[76] = 224;
  p[77] = 224;
  p[78] = 1;
  p[79] = 224;
  p[80] = 223;
  p[81] = 223;
  p[82] = 1102;
  p[83] = 54;
  p[84] = 74;
  p[85] = 225;
  p[86] = 1101;
  p[87] = 75;
  p[88] = 66;
  p[89] = 225;
  p[90] = 101;
  p[91] = 20;
  p[92] = 161;
  p[93] = 224;
  p[94] = 101;
  p[95] = -54;
  p[96] = 224;
  p[97] = 224;
  p[98] = 4;
  p[99] = 224;
  p[100] = 1002;
  p[101] = 223;
  p[102] = 8;
  p[103] = 223;
  p[104] = 1001;
  p[105] = 224;
  p[106] = 7;
  p[107] = 224;
  p[108] = 1;
  p[109] = 224;
  p[110] = 223;
  p[111] = 223;
  p[112] = 1101;
  p[113] = 6;
  p[114] = 30;
  p[115] = 225;
  p[116] = 2;
  p[117] = 88;
  p[118] = 84;
  p[119] = 224;
  p[120] = 101;
  p[121] = -4884;
  p[122] = 224;
  p[123] = 224;
  p[124] = 4;
  p[125] = 224;
  p[126] = 1002;
  p[127] = 223;
  p[128] = 8;
  p[129] = 223;
  p[130] = 101;
  p[131] = 2;
  p[132] = 224;
  p[133] = 224;
  p[134] = 1;
  p[135] = 224;
  p[136] = 223;
  p[137] = 223;
  p[138] = 1001;
  p[139] = 214;
  p[140] = 55;
  p[141] = 224;
  p[142] = 1001;
  p[143] = 224;
  p[144] = -89;
  p[145] = 224;
  p[146] = 4;
  p[147] = 224;
  p[148] = 102;
  p[149] = 8;
  p[150] = 223;
  p[151] = 223;
  p[152] = 1001;
  p[153] = 224;
  p[154] = 4;
  p[155] = 224;
  p[156] = 1;
  p[157] = 224;
  p[158] = 223;
  p[159] = 223;
  p[160] = 1101;
  p[161] = 34;
  p[162] = 69;
  p[163] = 225;
  p[164] = 1101;
  p[165] = 45;
  p[166] = 67;
  p[167] = 224;
  p[168] = 101;
  p[169] = -112;
  p[170] = 224;
  p[171] = 224;
  p[172] = 4;
  p[173] = 224;
  p[174] = 102;
  p[175] = 8;
  p[176] = 223;
  p[177] = 223;
  p[178] = 1001;
  p[179] = 224;
  p[180] = 2;
  p[181] = 224;
  p[182] = 1;
  p[183] = 223;
  p[184] = 224;
  p[185] = 223;
  p[186] = 1102;
  p[187] = 9;
  p[188] = 81;
  p[189] = 225;
  p[190] = 102;
  p[191] = 81;
  p[192] = 218;
  p[193] = 224;
  p[194] = 101;
  p[195] = -7290;
  p[196] = 224;
  p[197] = 224;
  p[198] = 4;
  p[199] = 224;
  p[200] = 1002;
  p[201] = 223;
  p[202] = 8;
  p[203] = 223;
  p[204] = 101;
  p[205] = 5;
  p[206] = 224;
  p[207] = 224;
  p[208] = 1;
  p[209] = 223;
  p[210] = 224;
  p[211] = 223;
  p[212] = 1101;
  p[213] = 84;
  p[214] = 34;
  p[215] = 225;
  p[216] = 1102;
  p[217] = 94;
  p[218] = 90;
  p[219] = 225;
  p[220] = 4;
  p[221] = 223;
  p[222] = 99;
  p[223] = 0;
  p[224] = 0;
  p[225] = 0;
  p[226] = 677;
  p[227] = 0;
  p[228] = 0;
  p[229] = 0;
  p[230] = 0;
  p[231] = 0;
  p[232] = 0;
  p[233] = 0;
  p[234] = 0;
  p[235] = 0;
  p[236] = 0;
  p[237] = 0;
  p[238] = 1105;
  p[239] = 0;
  p[240] = 99999;
  p[241] = 1105;
  p[242] = 227;
  p[243] = 247;
  p[244] = 1105;
  p[245] = 1;
  p[246] = 99999;
  p[247] = 1005;
  p[248] = 227;
  p[249] = 99999;
  p[250] = 1005;
  p[251] = 0;
  p[252] = 256;
  p[253] = 1105;
  p[254] = 1;
  p[255] = 99999;
  p[256] = 1106;
  p[257] = 227;
  p[258] = 99999;
  p[259] = 1106;
  p[260] = 0;
  p[261] = 265;
  p[262] = 1105;
  p[263] = 1;
  p[264] = 99999;
  p[265] = 1006;
  p[266] = 0;
  p[267] = 99999;
  p[268] = 1006;
  p[269] = 227;
  p[270] = 274;
  p[271] = 1105;
  p[272] = 1;
  p[273] = 99999;
  p[274] = 1105;
  p[275] = 1;
  p[276] = 280;
  p[277] = 1105;
  p[278] = 1;
  p[279] = 99999;
  p[280] = 1;
  p[281] = 225;
  p[282] = 225;
  p[283] = 225;
  p[284] = 1101;
  p[285] = 294;
  p[286] = 0;
  p[287] = 0;
  p[288] = 105;
  p[289] = 1;
  p[290] = 0;
  p[291] = 1105;
  p[292] = 1;
  p[293] = 99999;
  p[294] = 1106;
  p[295] = 0;
  p[296] = 300;
  p[297] = 1105;
  p[298] = 1;
  p[299] = 99999;
  p[300] = 1;
  p[301] = 225;
  p[302] = 225;
  p[303] = 225;
  p[304] = 1101;
  p[305] = 314;
  p[306] = 0;
  p[307] = 0;
  p[308] = 106;
  p[309] = 0;
  p[310] = 0;
  p[311] = 1105;
  p[312] = 1;
  p[313] = 99999;
  p[314] = 1007;
  p[315] = 677;
  p[316] = 677;
  p[317] = 224;
  p[318] = 102;
  p[319] = 2;
  p[320] = 223;
  p[321] = 223;
  p[322] = 1005;
  p[323] = 224;
  p[324] = 329;
  p[325] = 101;
  p[326] = 1;
  p[327] = 223;
  p[328] = 223;
  p[329] = 1108;
  p[330] = 226;
  p[331] = 677;
  p[332] = 224;
  p[333] = 1002;
  p[334] = 223;
  p[335] = 2;
  p[336] = 223;
  p[337] = 1005;
  p[338] = 224;
  p[339] = 344;
  p[340] = 101;
  p[341] = 1;
  p[342] = 223;
  p[343] = 223;
  p[344] = 1008;
  p[345] = 677;
  p[346] = 677;
  p[347] = 224;
  p[348] = 102;
  p[349] = 2;
  p[350] = 223;
  p[351] = 223;
  p[352] = 1005;
  p[353] = 224;
  p[354] = 359;
  p[355] = 101;
  p[356] = 1;
  p[357] = 223;
  p[358] = 223;
  p[359] = 8;
  p[360] = 226;
  p[361] = 677;
  p[362] = 224;
  p[363] = 1002;
  p[364] = 223;
  p[365] = 2;
  p[366] = 223;
  p[367] = 1006;
  p[368] = 224;
  p[369] = 374;
  p[370] = 101;
  p[371] = 1;
  p[372] = 223;
  p[373] = 223;
  p[374] = 108;
  p[375] = 226;
  p[376] = 677;
  p[377] = 224;
  p[378] = 1002;
  p[379] = 223;
  p[380] = 2;
  p[381] = 223;
  p[382] = 1006;
  p[383] = 224;
  p[384] = 389;
  p[385] = 1001;
  p[386] = 223;
  p[387] = 1;
  p[388] = 223;
  p[389] = 1107;
  p[390] = 226;
  p[391] = 677;
  p[392] = 224;
  p[393] = 102;
  p[394] = 2;
  p[395] = 223;
  p[396] = 223;
  p[397] = 1005;
  p[398] = 224;
  p[399] = 404;
  p[400] = 1001;
  p[401] = 223;
  p[402] = 1;
  p[403] = 223;
  p[404] = 7;
  p[405] = 226;
  p[406] = 677;
  p[407] = 224;
  p[408] = 1002;
  p[409] = 223;
  p[410] = 2;
  p[411] = 223;
  p[412] = 1005;
  p[413] = 224;
  p[414] = 419;
  p[415] = 101;
  p[416] = 1;
  p[417] = 223;
  p[418] = 223;
  p[419] = 1107;
  p[420] = 677;
  p[421] = 226;
  p[422] = 224;
  p[423] = 102;
  p[424] = 2;
  p[425] = 223;
  p[426] = 223;
  p[427] = 1006;
  p[428] = 224;
  p[429] = 434;
  p[430] = 1001;
  p[431] = 223;
  p[432] = 1;
  p[433] = 223;
  p[434] = 1107;
  p[435] = 226;
  p[436] = 226;
  p[437] = 224;
  p[438] = 1002;
  p[439] = 223;
  p[440] = 2;
  p[441] = 223;
  p[442] = 1006;
  p[443] = 224;
  p[444] = 449;
  p[445] = 101;
  p[446] = 1;
  p[447] = 223;
  p[448] = 223;
  p[449] = 1108;
  p[450] = 226;
  p[451] = 226;
  p[452] = 224;
  p[453] = 1002;
  p[454] = 223;
  p[455] = 2;
  p[456] = 223;
  p[457] = 1005;
  p[458] = 224;
  p[459] = 464;
  p[460] = 101;
  p[461] = 1;
  p[462] = 223;
  p[463] = 223;
  p[464] = 8;
  p[465] = 677;
  p[466] = 226;
  p[467] = 224;
  p[468] = 102;
  p[469] = 2;
  p[470] = 223;
  p[471] = 223;
  p[472] = 1005;
  p[473] = 224;
  p[474] = 479;
  p[475] = 101;
  p[476] = 1;
  p[477] = 223;
  p[478] = 223;
  p[479] = 8;
  p[480] = 226;
  p[481] = 226;
  p[482] = 224;
  p[483] = 1002;
  p[484] = 223;
  p[485] = 2;
  p[486] = 223;
  p[487] = 1006;
  p[488] = 224;
  p[489] = 494;
  p[490] = 1001;
  p[491] = 223;
  p[492] = 1;
  p[493] = 223;
  p[494] = 1007;
  p[495] = 226;
  p[496] = 677;
  p[497] = 224;
  p[498] = 1002;
  p[499] = 223;
  p[500] = 2;
  p[501] = 223;
  p[502] = 1006;
  p[503] = 224;
  p[504] = 509;
  p[505] = 1001;
  p[506] = 223;
  p[507] = 1;
  p[508] = 223;
  p[509] = 108;
  p[510] = 226;
  p[511] = 226;
  p[512] = 224;
  p[513] = 1002;
  p[514] = 223;
  p[515] = 2;
  p[516] = 223;
  p[517] = 1006;
  p[518] = 224;
  p[519] = 524;
  p[520] = 1001;
  p[521] = 223;
  p[522] = 1;
  p[523] = 223;
  p[524] = 1108;
  p[525] = 677;
  p[526] = 226;
  p[527] = 224;
  p[528] = 102;
  p[529] = 2;
  p[530] = 223;
  p[531] = 223;
  p[532] = 1006;
  p[533] = 224;
  p[534] = 539;
  p[535] = 101;
  p[536] = 1;
  p[537] = 223;
  p[538] = 223;
  p[539] = 1008;
  p[540] = 677;
  p[541] = 226;
  p[542] = 224;
  p[543] = 102;
  p[544] = 2;
  p[545] = 223;
  p[546] = 223;
  p[547] = 1006;
  p[548] = 224;
  p[549] = 554;
  p[550] = 101;
  p[551] = 1;
  p[552] = 223;
  p[553] = 223;
  p[554] = 107;
  p[555] = 226;
  p[556] = 677;
  p[557] = 224;
  p[558] = 1002;
  p[559] = 223;
  p[560] = 2;
  p[561] = 223;
  p[562] = 1006;
  p[563] = 224;
  p[564] = 569;
  p[565] = 101;
  p[566] = 1;
  p[567] = 223;
  p[568] = 223;
  p[569] = 107;
  p[570] = 677;
  p[571] = 677;
  p[572] = 224;
  p[573] = 102;
  p[574] = 2;
  p[575] = 223;
  p[576] = 223;
  p[577] = 1006;
  p[578] = 224;
  p[579] = 584;
  p[580] = 101;
  p[581] = 1;
  p[582] = 223;
  p[583] = 223;
  p[584] = 7;
  p[585] = 677;
  p[586] = 226;
  p[587] = 224;
  p[588] = 102;
  p[589] = 2;
  p[590] = 223;
  p[591] = 223;
  p[592] = 1005;
  p[593] = 224;
  p[594] = 599;
  p[595] = 101;
  p[596] = 1;
  p[597] = 223;
  p[598] = 223;
  p[599] = 1008;
  p[600] = 226;
  p[601] = 226;
  p[602] = 224;
  p[603] = 1002;
  p[604] = 223;
  p[605] = 2;
  p[606] = 223;
  p[607] = 1005;
  p[608] = 224;
  p[609] = 614;
  p[610] = 1001;
  p[611] = 223;
  p[612] = 1;
  p[613] = 223;
  p[614] = 107;
  p[615] = 226;
  p[616] = 226;
  p[617] = 224;
  p[618] = 1002;
  p[619] = 223;
  p[620] = 2;
  p[621] = 223;
  p[622] = 1005;
  p[623] = 224;
  p[624] = 629;
  p[625] = 101;
  p[626] = 1;
  p[627] = 223;
  p[628] = 223;
  p[629] = 7;
  p[630] = 226;
  p[631] = 226;
  p[632] = 224;
  p[633] = 102;
  p[634] = 2;
  p[635] = 223;
  p[636] = 223;
  p[637] = 1006;
  p[638] = 224;
  p[639] = 644;
  p[640] = 1001;
  p[641] = 223;
  p[642] = 1;
  p[643] = 223;
  p[644] = 1007;
  p[645] = 226;
  p[646] = 226;
  p[647] = 224;
  p[648] = 102;
  p[649] = 2;
  p[650] = 223;
  p[651] = 223;
  p[652] = 1006;
  p[653] = 224;
  p[654] = 659;
  p[655] = 101;
  p[656] = 1;
  p[657] = 223;
  p[658] = 223;
  p[659] = 108;
  p[660] = 677;
  p[661] = 677;
  p[662] = 224;
  p[663] = 102;
  p[664] = 2;
  p[665] = 223;
  p[666] = 223;
  p[667] = 1005;
  p[668] = 224;
  p[669] = 674;
  p[670] = 1001;
  p[671] = 223;
  p[672] = 1;
  p[673] = 223;
  p[674] = 4;
  p[675] = 223;
  p[676] = 99;
  p[677] = 226;
label000:
  p[225] = *in++;
label002:
  p[6] += p[225];
label006: // p6 = 1100;
label007:
  p[104] = p[238] + p[225];
label011: // p11 = 0;
label012:
  p[225] = 27 * 28;
label016:
  p[224] = p[113] + p[14];
label020:
  p[224] += -34;
label024:
  output(p[224]);
label026:
  p[223] *= 8;
label030:
  p[224] += 7;
label034:
  p[223] += p[224];
label038:
  p[224] = 52 * 34;
label042:
  p[224] += -1768;
label046:
  output(p[224]);
label048:
  p[223] *= 8;
label052:
  p[224] += 6;
label056:
  p[223] += p[224];
label060:
  p[224] = p[187] * 14;
label064:
  p[224] += -126;
label068:
  output(p[224]);
label070:
  p[223] *= 8;
label074:
  p[224] += 2;
label078:
  p[223] += p[224];
label082:
  p[225] = 54 * 74;
label086:
  p[225] = 75 + 66;
label090:
  p[224] = 20 + p[161];
label094:
  p[224] += -54;
label098:
  output(p[224]);
label100:
  p[223] *= 8;
label104:
  p[224] += 7;
label108:
  p[223] += p[224];
label112:
  p[225] = 6 + 30;
label116:
  p[224] = p[88] * p[84];
label120:
  p[224] += -4884;
label124:
  output(p[224]);
label126:
  p[223] *= 8;
label130:
  p[224] += 2;
label134:
  p[223] += p[224];
label138:
  p[224] = p[214] + 55;
label142:
  p[224] += -89;
label146:
  output(p[224]);
label148:
  p[223] *= 8;
label152:
  p[224] += 4;
label156:
  p[223] += p[224];
label160:
  p[225] = 34 + 69;
label164:
  p[224] = 45 + 67;
label168:
  p[224] += -112;
label172:
  output(p[224]);
label174:
  p[223] *= 8;
label178:
  p[224] += 2;
label182:
  p[223] += p[224];
label186:
  p[225] = 9 * 81;
label190:
  p[224] = 81 * p[218];
label194:
  p[224] += -7290;
label198:
  output(p[224]);
label200:
  p[223] *= 8;
label204:
  p[224] += 5;
label208:
  p[223] += p[224];
label212:
  p[225] = 84 + 34;
label216:
  p[225] = 94 * 90;
label220:
  output(p[223]);
label222:
  return; // HALT
}

void day9Int(std::initializer_list<long long> input) {
  map<long long, long long> p;
  long long rp = 0;
  auto in = input.begin();

  p[0] = 1102;
  p[1] = 34463338;
  p[2] = 34463338;
  p[3] = 63;
  p[4] = 1007;
  p[5] = 63;
  p[6] = 34463338;
  p[7] = 63;
  p[8] = 1005;
  p[9] = 63;
  p[10] = 53;
  p[11] = 1102;
  p[12] = 1;
  p[13] = 3;
  p[14] = 1000;
  p[15] = 109;
  p[16] = 988;
  p[17] = 209;
  p[18] = 12;
  p[19] = 9;
  p[20] = 1000;
  p[21] = 209;
  p[22] = 6;
  p[23] = 209;
  p[24] = 3;
  p[25] = 203;
  p[26] = 0;
  p[27] = 1008;
  p[28] = 1000;
  p[29] = 1;
  p[30] = 63;
  p[31] = 1005;
  p[32] = 63;
  p[33] = 65;
  p[34] = 1008;
  p[35] = 1000;
  p[36] = 2;
  p[37] = 63;
  p[38] = 1005;
  p[39] = 63;
  p[40] = 902;
  p[41] = 1008;
  p[42] = 1000;
  p[43] = 0;
  p[44] = 63;
  p[45] = 1005;
  p[46] = 63;
  p[47] = 58;
  p[48] = 4;
  p[49] = 25;
  p[50] = 104;
  p[51] = 0;
  p[52] = 99;
  p[53] = 4;
  p[54] = 0;
  p[55] = 104;
  p[56] = 0;
  p[57] = 99;
  p[58] = 4;
  p[59] = 17;
  p[60] = 104;
  p[61] = 0;
  p[62] = 99;
  p[63] = 0;
  p[64] = 0;
  p[65] = 1101;
  p[66] = 0;
  p[67] = 39;
  p[68] = 1005;
  p[69] = 1102;
  p[70] = 1;
  p[71] = 1;
  p[72] = 1021;
  p[73] = 1101;
  p[74] = 0;
  p[75] = 212;
  p[76] = 1025;
  p[77] = 1101;
  p[78] = 0;
  p[79] = 24;
  p[80] = 1014;
  p[81] = 1102;
  p[82] = 22;
  p[83] = 1;
  p[84] = 1019;
  p[85] = 1101;
  p[86] = 0;
  p[87] = 35;
  p[88] = 1003;
  p[89] = 1101;
  p[90] = 38;
  p[91] = 0;
  p[92] = 1002;
  p[93] = 1101;
  p[94] = 0;
  p[95] = 571;
  p[96] = 1026;
  p[97] = 1102;
  p[98] = 32;
  p[99] = 1;
  p[100] = 1006;
  p[101] = 1102;
  p[102] = 31;
  p[103] = 1;
  p[104] = 1000;
  p[105] = 1102;
  p[106] = 25;
  p[107] = 1;
  p[108] = 1018;
  p[109] = 1102;
  p[110] = 1;
  p[111] = 37;
  p[112] = 1016;
  p[113] = 1101;
  p[114] = 0;
  p[115] = 820;
  p[116] = 1023;
  p[117] = 1102;
  p[118] = 1;
  p[119] = 29;
  p[120] = 1004;
  p[121] = 1101;
  p[122] = 564;
  p[123] = 0;
  p[124] = 1027;
  p[125] = 1101;
  p[126] = 0;
  p[127] = 375;
  p[128] = 1028;
  p[129] = 1101;
  p[130] = 26;
  p[131] = 0;
  p[132] = 1013;
  p[133] = 1102;
  p[134] = 1;
  p[135] = 370;
  p[136] = 1029;
  p[137] = 1101;
  p[138] = 21;
  p[139] = 0;
  p[140] = 1007;
  p[141] = 1101;
  p[142] = 0;
  p[143] = 0;
  p[144] = 1020;
  p[145] = 1102;
  p[146] = 1;
  p[147] = 30;
  p[148] = 1001;
  p[149] = 1102;
  p[150] = 36;
  p[151] = 1;
  p[152] = 1011;
  p[153] = 1102;
  p[154] = 1;
  p[155] = 27;
  p[156] = 1017;
  p[157] = 1101;
  p[158] = 0;
  p[159] = 28;
  p[160] = 1012;
  p[161] = 1101;
  p[162] = 0;
  p[163] = 217;
  p[164] = 1024;
  p[165] = 1101;
  p[166] = 823;
  p[167] = 0;
  p[168] = 1022;
  p[169] = 1102;
  p[170] = 1;
  p[171] = 20;
  p[172] = 1009;
  p[173] = 1101;
  p[174] = 0;
  p[175] = 23;
  p[176] = 1010;
  p[177] = 1101;
  p[178] = 34;
  p[179] = 0;
  p[180] = 1015;
  p[181] = 1101;
  p[182] = 33;
  p[183] = 0;
  p[184] = 1008;
  p[185] = 109;
  p[186] = 5;
  p[187] = 1208;
  p[188] = 0;
  p[189] = 39;
  p[190] = 63;
  p[191] = 1005;
  p[192] = 63;
  p[193] = 199;
  p[194] = 4;
  p[195] = 187;
  p[196] = 1106;
  p[197] = 0;
  p[198] = 203;
  p[199] = 1001;
  p[200] = 64;
  p[201] = 1;
  p[202] = 64;
  p[203] = 1002;
  p[204] = 64;
  p[205] = 2;
  p[206] = 64;
  p[207] = 109;
  p[208] = 13;
  p[209] = 2105;
  p[210] = 1;
  p[211] = 6;
  p[212] = 4;
  p[213] = 209;
  p[214] = 1105;
  p[215] = 1;
  p[216] = 221;
  p[217] = 1001;
  p[218] = 64;
  p[219] = 1;
  p[220] = 64;
  p[221] = 1002;
  p[222] = 64;
  p[223] = 2;
  p[224] = 64;
  p[225] = 109;
  p[226] = -4;
  p[227] = 21108;
  p[228] = 40;
  p[229] = 39;
  p[230] = -1;
  p[231] = 1005;
  p[232] = 1013;
  p[233] = 241;
  p[234] = 1001;
  p[235] = 64;
  p[236] = 1;
  p[237] = 64;
  p[238] = 1105;
  p[239] = 1;
  p[240] = 243;
  p[241] = 4;
  p[242] = 227;
  p[243] = 1002;
  p[244] = 64;
  p[245] = 2;
  p[246] = 64;
  p[247] = 109;
  p[248] = 5;
  p[249] = 21102;
  p[250] = 41;
  p[251] = 1;
  p[252] = -1;
  p[253] = 1008;
  p[254] = 1018;
  p[255] = 40;
  p[256] = 63;
  p[257] = 1005;
  p[258] = 63;
  p[259] = 267;
  p[260] = 1001;
  p[261] = 64;
  p[262] = 1;
  p[263] = 64;
  p[264] = 1106;
  p[265] = 0;
  p[266] = 269;
  p[267] = 4;
  p[268] = 249;
  p[269] = 1002;
  p[270] = 64;
  p[271] = 2;
  p[272] = 64;
  p[273] = 109;
  p[274] = -28;
  p[275] = 1202;
  p[276] = 10;
  p[277] = 1;
  p[278] = 63;
  p[279] = 1008;
  p[280] = 63;
  p[281] = 30;
  p[282] = 63;
  p[283] = 1005;
  p[284] = 63;
  p[285] = 291;
  p[286] = 4;
  p[287] = 275;
  p[288] = 1106;
  p[289] = 0;
  p[290] = 295;
  p[291] = 1001;
  p[292] = 64;
  p[293] = 1;
  p[294] = 64;
  p[295] = 1002;
  p[296] = 64;
  p[297] = 2;
  p[298] = 64;
  p[299] = 109;
  p[300] = 24;
  p[301] = 21107;
  p[302] = 42;
  p[303] = 43;
  p[304] = -4;
  p[305] = 1005;
  p[306] = 1011;
  p[307] = 313;
  p[308] = 4;
  p[309] = 301;
  p[310] = 1106;
  p[311] = 0;
  p[312] = 317;
  p[313] = 1001;
  p[314] = 64;
  p[315] = 1;
  p[316] = 64;
  p[317] = 1002;
  p[318] = 64;
  p[319] = 2;
  p[320] = 64;
  p[321] = 109;
  p[322] = -8;
  p[323] = 21108;
  p[324] = 43;
  p[325] = 43;
  p[326] = 3;
  p[327] = 1005;
  p[328] = 1010;
  p[329] = 335;
  p[330] = 4;
  p[331] = 323;
  p[332] = 1105;
  p[333] = 1;
  p[334] = 339;
  p[335] = 1001;
  p[336] = 64;
  p[337] = 1;
  p[338] = 64;
  p[339] = 1002;
  p[340] = 64;
  p[341] = 2;
  p[342] = 64;
  p[343] = 109;
  p[344] = -8;
  p[345] = 1207;
  p[346] = 4;
  p[347] = 34;
  p[348] = 63;
  p[349] = 1005;
  p[350] = 63;
  p[351] = 359;
  p[352] = 1001;
  p[353] = 64;
  p[354] = 1;
  p[355] = 64;
  p[356] = 1106;
  p[357] = 0;
  p[358] = 361;
  p[359] = 4;
  p[360] = 345;
  p[361] = 1002;
  p[362] = 64;
  p[363] = 2;
  p[364] = 64;
  p[365] = 109;
  p[366] = 26;
  p[367] = 2106;
  p[368] = 0;
  p[369] = 3;
  p[370] = 4;
  p[371] = 367;
  p[372] = 1106;
  p[373] = 0;
  p[374] = 379;
  p[375] = 1001;
  p[376] = 64;
  p[377] = 1;
  p[378] = 64;
  p[379] = 1002;
  p[380] = 64;
  p[381] = 2;
  p[382] = 64;
  p[383] = 109;
  p[384] = -21;
  p[385] = 2102;
  p[386] = 1;
  p[387] = -2;
  p[388] = 63;
  p[389] = 1008;
  p[390] = 63;
  p[391] = 37;
  p[392] = 63;
  p[393] = 1005;
  p[394] = 63;
  p[395] = 399;
  p[396] = 1105;
  p[397] = 1;
  p[398] = 405;
  p[399] = 4;
  p[400] = 385;
  p[401] = 1001;
  p[402] = 64;
  p[403] = 1;
  p[404] = 64;
  p[405] = 1002;
  p[406] = 64;
  p[407] = 2;
  p[408] = 64;
  p[409] = 109;
  p[410] = 2;
  p[411] = 1207;
  p[412] = -2;
  p[413] = 30;
  p[414] = 63;
  p[415] = 1005;
  p[416] = 63;
  p[417] = 427;
  p[418] = 4;
  p[419] = 411;
  p[420] = 1001;
  p[421] = 64;
  p[422] = 1;
  p[423] = 64;
  p[424] = 1105;
  p[425] = 1;
  p[426] = 427;
  p[427] = 1002;
  p[428] = 64;
  p[429] = 2;
  p[430] = 64;
  p[431] = 109;
  p[432] = 4;
  p[433] = 2108;
  p[434] = 36;
  p[435] = -5;
  p[436] = 63;
  p[437] = 1005;
  p[438] = 63;
  p[439] = 447;
  p[440] = 1001;
  p[441] = 64;
  p[442] = 1;
  p[443] = 64;
  p[444] = 1106;
  p[445] = 0;
  p[446] = 449;
  p[447] = 4;
  p[448] = 433;
  p[449] = 1002;
  p[450] = 64;
  p[451] = 2;
  p[452] = 64;
  p[453] = 109;
  p[454] = -13;
  p[455] = 1201;
  p[456] = 8;
  p[457] = 0;
  p[458] = 63;
  p[459] = 1008;
  p[460] = 63;
  p[461] = 41;
  p[462] = 63;
  p[463] = 1005;
  p[464] = 63;
  p[465] = 469;
  p[466] = 1106;
  p[467] = 0;
  p[468] = 475;
  p[469] = 4;
  p[470] = 455;
  p[471] = 1001;
  p[472] = 64;
  p[473] = 1;
  p[474] = 64;
  p[475] = 1002;
  p[476] = 64;
  p[477] = 2;
  p[478] = 64;
  p[479] = 109;
  p[480] = 14;
  p[481] = 21107;
  p[482] = 44;
  p[483] = 43;
  p[484] = 3;
  p[485] = 1005;
  p[486] = 1014;
  p[487] = 495;
  p[488] = 1001;
  p[489] = 64;
  p[490] = 1;
  p[491] = 64;
  p[492] = 1106;
  p[493] = 0;
  p[494] = 497;
  p[495] = 4;
  p[496] = 481;
  p[497] = 1002;
  p[498] = 64;
  p[499] = 2;
  p[500] = 64;
  p[501] = 109;
  p[502] = 2;
  p[503] = 1205;
  p[504] = 8;
  p[505] = 511;
  p[506] = 4;
  p[507] = 503;
  p[508] = 1106;
  p[509] = 0;
  p[510] = 515;
  p[511] = 1001;
  p[512] = 64;
  p[513] = 1;
  p[514] = 64;
  p[515] = 1002;
  p[516] = 64;
  p[517] = 2;
  p[518] = 64;
  p[519] = 109;
  p[520] = 14;
  p[521] = 1206;
  p[522] = -6;
  p[523] = 527;
  p[524] = 1105;
  p[525] = 1;
  p[526] = 533;
  p[527] = 4;
  p[528] = 521;
  p[529] = 1001;
  p[530] = 64;
  p[531] = 1;
  p[532] = 64;
  p[533] = 1002;
  p[534] = 64;
  p[535] = 2;
  p[536] = 64;
  p[537] = 109;
  p[538] = -29;
  p[539] = 2107;
  p[540] = 31;
  p[541] = 8;
  p[542] = 63;
  p[543] = 1005;
  p[544] = 63;
  p[545] = 551;
  p[546] = 4;
  p[547] = 539;
  p[548] = 1105;
  p[549] = 1;
  p[550] = 555;
  p[551] = 1001;
  p[552] = 64;
  p[553] = 1;
  p[554] = 64;
  p[555] = 1002;
  p[556] = 64;
  p[557] = 2;
  p[558] = 64;
  p[559] = 109;
  p[560] = 28;
  p[561] = 2106;
  p[562] = 0;
  p[563] = 1;
  p[564] = 1001;
  p[565] = 64;
  p[566] = 1;
  p[567] = 64;
  p[568] = 1106;
  p[569] = 0;
  p[570] = 573;
  p[571] = 4;
  p[572] = 561;
  p[573] = 1002;
  p[574] = 64;
  p[575] = 2;
  p[576] = 64;
  p[577] = 109;
  p[578] = -3;
  p[579] = 21101;
  p[580] = 45;
  p[581] = 0;
  p[582] = -4;
  p[583] = 1008;
  p[584] = 1019;
  p[585] = 45;
  p[586] = 63;
  p[587] = 1005;
  p[588] = 63;
  p[589] = 595;
  p[590] = 4;
  p[591] = 579;
  p[592] = 1105;
  p[593] = 1;
  p[594] = 599;
  p[595] = 1001;
  p[596] = 64;
  p[597] = 1;
  p[598] = 64;
  p[599] = 1002;
  p[600] = 64;
  p[601] = 2;
  p[602] = 64;
  p[603] = 109;
  p[604] = -23;
  p[605] = 1208;
  p[606] = 2;
  p[607] = 39;
  p[608] = 63;
  p[609] = 1005;
  p[610] = 63;
  p[611] = 615;
  p[612] = 1105;
  p[613] = 1;
  p[614] = 621;
  p[615] = 4;
  p[616] = 605;
  p[617] = 1001;
  p[618] = 64;
  p[619] = 1;
  p[620] = 64;
  p[621] = 1002;
  p[622] = 64;
  p[623] = 2;
  p[624] = 64;
  p[625] = 109;
  p[626] = 15;
  p[627] = 2108;
  p[628] = 32;
  p[629] = -9;
  p[630] = 63;
  p[631] = 1005;
  p[632] = 63;
  p[633] = 643;
  p[634] = 4;
  p[635] = 627;
  p[636] = 1001;
  p[637] = 64;
  p[638] = 1;
  p[639] = 64;
  p[640] = 1105;
  p[641] = 1;
  p[642] = 643;
  p[643] = 1002;
  p[644] = 64;
  p[645] = 2;
  p[646] = 64;
  p[647] = 109;
  p[648] = -9;
  p[649] = 2107;
  p[650] = 33;
  p[651] = 0;
  p[652] = 63;
  p[653] = 1005;
  p[654] = 63;
  p[655] = 659;
  p[656] = 1106;
  p[657] = 0;
  p[658] = 665;
  p[659] = 4;
  p[660] = 649;
  p[661] = 1001;
  p[662] = 64;
  p[663] = 1;
  p[664] = 64;
  p[665] = 1002;
  p[666] = 64;
  p[667] = 2;
  p[668] = 64;
  p[669] = 109;
  p[670] = 7;
  p[671] = 21101;
  p[672] = 46;
  p[673] = 0;
  p[674] = 2;
  p[675] = 1008;
  p[676] = 1015;
  p[677] = 49;
  p[678] = 63;
  p[679] = 1005;
  p[680] = 63;
  p[681] = 689;
  p[682] = 1001;
  p[683] = 64;
  p[684] = 1;
  p[685] = 64;
  p[686] = 1106;
  p[687] = 0;
  p[688] = 691;
  p[689] = 4;
  p[690] = 671;
  p[691] = 1002;
  p[692] = 64;
  p[693] = 2;
  p[694] = 64;
  p[695] = 109;
  p[696] = -8;
  p[697] = 2101;
  p[698] = 0;
  p[699] = -3;
  p[700] = 63;
  p[701] = 1008;
  p[702] = 63;
  p[703] = 35;
  p[704] = 63;
  p[705] = 1005;
  p[706] = 63;
  p[707] = 711;
  p[708] = 1105;
  p[709] = 1;
  p[710] = 717;
  p[711] = 4;
  p[712] = 697;
  p[713] = 1001;
  p[714] = 64;
  p[715] = 1;
  p[716] = 64;
  p[717] = 1002;
  p[718] = 64;
  p[719] = 2;
  p[720] = 64;
  p[721] = 109;
  p[722] = 12;
  p[723] = 1202;
  p[724] = -9;
  p[725] = 1;
  p[726] = 63;
  p[727] = 1008;
  p[728] = 63;
  p[729] = 31;
  p[730] = 63;
  p[731] = 1005;
  p[732] = 63;
  p[733] = 741;
  p[734] = 1001;
  p[735] = 64;
  p[736] = 1;
  p[737] = 64;
  p[738] = 1105;
  p[739] = 1;
  p[740] = 743;
  p[741] = 4;
  p[742] = 723;
  p[743] = 1002;
  p[744] = 64;
  p[745] = 2;
  p[746] = 64;
  p[747] = 109;
  p[748] = -27;
  p[749] = 2102;
  p[750] = 1;
  p[751] = 10;
  p[752] = 63;
  p[753] = 1008;
  p[754] = 63;
  p[755] = 31;
  p[756] = 63;
  p[757] = 1005;
  p[758] = 63;
  p[759] = 769;
  p[760] = 4;
  p[761] = 749;
  p[762] = 1001;
  p[763] = 64;
  p[764] = 1;
  p[765] = 64;
  p[766] = 1105;
  p[767] = 1;
  p[768] = 769;
  p[769] = 1002;
  p[770] = 64;
  p[771] = 2;
  p[772] = 64;
  p[773] = 109;
  p[774] = 9;
  p[775] = 2101;
  p[776] = 0;
  p[777] = 1;
  p[778] = 63;
  p[779] = 1008;
  p[780] = 63;
  p[781] = 31;
  p[782] = 63;
  p[783] = 1005;
  p[784] = 63;
  p[785] = 791;
  p[786] = 4;
  p[787] = 775;
  p[788] = 1106;
  p[789] = 0;
  p[790] = 795;
  p[791] = 1001;
  p[792] = 64;
  p[793] = 1;
  p[794] = 64;
  p[795] = 1002;
  p[796] = 64;
  p[797] = 2;
  p[798] = 64;
  p[799] = 109;
  p[800] = 28;
  p[801] = 1206;
  p[802] = -7;
  p[803] = 809;
  p[804] = 4;
  p[805] = 801;
  p[806] = 1105;
  p[807] = 1;
  p[808] = 813;
  p[809] = 1001;
  p[810] = 64;
  p[811] = 1;
  p[812] = 64;
  p[813] = 1002;
  p[814] = 64;
  p[815] = 2;
  p[816] = 64;
  p[817] = 2105;
  p[818] = 1;
  p[819] = -4;
  p[820] = 1106;
  p[821] = 0;
  p[822] = 829;
  p[823] = 4;
  p[824] = 817;
  p[825] = 1001;
  p[826] = 64;
  p[827] = 1;
  p[828] = 64;
  p[829] = 1002;
  p[830] = 64;
  p[831] = 2;
  p[832] = 64;
  p[833] = 109;
  p[834] = -15;
  p[835] = 21102;
  p[836] = 47;
  p[837] = 1;
  p[838] = -2;
  p[839] = 1008;
  p[840] = 1010;
  p[841] = 47;
  p[842] = 63;
  p[843] = 1005;
  p[844] = 63;
  p[845] = 851;
  p[846] = 4;
  p[847] = 835;
  p[848] = 1106;
  p[849] = 0;
  p[850] = 855;
  p[851] = 1001;
  p[852] = 64;
  p[853] = 1;
  p[854] = 64;
  p[855] = 1002;
  p[856] = 64;
  p[857] = 2;
  p[858] = 64;
  p[859] = 109;
  p[860] = 5;
  p[861] = 1205;
  p[862] = 3;
  p[863] = 867;
  p[864] = 1106;
  p[865] = 0;
  p[866] = 873;
  p[867] = 4;
  p[868] = 861;
  p[869] = 1001;
  p[870] = 64;
  p[871] = 1;
  p[872] = 64;
  p[873] = 1002;
  p[874] = 64;
  p[875] = 2;
  p[876] = 64;
  p[877] = 109;
  p[878] = -12;
  p[879] = 1201;
  p[880] = 0;
  p[881] = 0;
  p[882] = 63;
  p[883] = 1008;
  p[884] = 63;
  p[885] = 39;
  p[886] = 63;
  p[887] = 1005;
  p[888] = 63;
  p[889] = 895;
  p[890] = 4;
  p[891] = 879;
  p[892] = 1105;
  p[893] = 1;
  p[894] = 899;
  p[895] = 1001;
  p[896] = 64;
  p[897] = 1;
  p[898] = 64;
  p[899] = 4;
  p[900] = 64;
  p[901] = 99;
  p[902] = 21101;
  p[903] = 0;
  p[904] = 27;
  p[905] = 1;
  p[906] = 21102;
  p[907] = 913;
  p[908] = 1;
  p[909] = 0;
  p[910] = 1106;
  p[911] = 0;
  p[912] = 920;
  p[913] = 21201;
  p[914] = 1;
  p[915] = 47951;
  p[916] = 1;
  p[917] = 204;
  p[918] = 1;
  p[919] = 99;
  p[920] = 109;
  p[921] = 3;
  p[922] = 1207;
  p[923] = -2;
  p[924] = 3;
  p[925] = 63;
  p[926] = 1005;
  p[927] = 63;
  p[928] = 962;
  p[929] = 21201;
  p[930] = -2;
  p[931] = -1;
  p[932] = 1;
  p[933] = 21101;
  p[934] = 0;
  p[935] = 940;
  p[936] = 0;
  p[937] = 1105;
  p[938] = 1;
  p[939] = 920;
  p[940] = 21201;
  p[941] = 1;
  p[942] = 0;
  p[943] = -1;
  p[944] = 21201;
  p[945] = -2;
  p[946] = -3;
  p[947] = 1;
  p[948] = 21101;
  p[949] = 0;
  p[950] = 955;
  p[951] = 0;
  p[952] = 1106;
  p[953] = 0;
  p[954] = 920;
  p[955] = 22201;
  p[956] = 1;
  p[957] = -1;
  p[958] = -2;
  p[959] = 1105;
  p[960] = 1;
  p[961] = 966;
  p[962] = 21202;
  p[963] = -2;
  p[964] = 1;
  p[965] = -2;
  p[966] = 109;
  p[967] = -3;
  p[968] = 2105;
  p[969] = 1;
  p[970] = 0;
label000:
  p[63] = 34463338ll * 34463338ll;
label004:
  p[63] = (p[63] < 34463338ll) ? 1 : 0;
label008:
  if (p[63] != 0)
    goto label053;
label011:
  p[1000] = 1 * 3;
label015:
  rp += 988;
label017:
  rp += p[rp + 12];
label019:
  rp += p[1000];
label021:
  rp += p[rp + 6];
label023:
  rp += p[rp + 3];
label025:
  p[rp + 0] = *in++;
label027:
  p[63] = (p[1000] == 1) ? 1 : 0;
label031:
  if (p[63] != 0)
    goto label065;
label034:
  p[63] = (p[1000] == 2) ? 1 : 0;
label038:
  if (p[63] != 0)
    goto label902;
label041:
  p[63] = (p[1000] == 0) ? 1 : 0;
label045:
  if (p[63] != 0)
    goto label058;
label048:
  output(p[25]);
label050:
  output(0);
label052:
  return; // HALT
label053:
  output(p[0]);
label055:
  output(0);
label057:
  return; // HALT
label058:
  output(p[17]);
label060:
  output(0);
label062:
  return; // HALT
label063: // p63 = 0;
label064: // p64 = 0;
label065:
  p[1005] = 0 + 39;
label069:
  p[1021] = 1 * 1;
label073:
  p[1025] = 0 + 212;
label077:
  p[1014] = 0 + 24;
label081:
  p[1019] = 22 * 1;
label085:
  p[1003] = 0 + 35;
label089:
  p[1002] = 38 + 0;
label093:
  p[1026] = 0 + 571;
label097:
  p[1006] = 32 * 1;
label101:
  p[1000] = 31 * 1;
label105:
  p[1018] = 25 * 1;
label109:
  p[1016] = 1 * 37;
label113:
  p[1023] = 0 + 820;
label117:
  p[1004] = 1 * 29;
label121:
  p[1027] = 564 + 0;
label125:
  p[1028] = 0 + 375;
label129:
  p[1013] = 26 + 0;
label133:
  p[1029] = 1 * 370;
label137:
  p[1007] = 21 + 0;
label141:
  p[1020] = 0 + 0;
label145:
  p[1001] = 1 * 30;
label149:
  p[1011] = 36 * 1;
label153:
  p[1017] = 1 * 27;
label157:
  p[1012] = 0 + 28;
label161:
  p[1024] = 0 + 217;
label165:
  p[1022] = 823 + 0;
label169:
  p[1009] = 1 * 20;
label173:
  p[1010] = 0 + 23;
label177:
  p[1015] = 34 + 0;
label181:
  p[1008] = 33 + 0;
label185:
  rp += 5;
label187:
  p[63] = (p[rp + 0] == 39) ? 1 : 0;
label191:
  if (p[63] != 0)
    goto label199;
label194:
  output(p[187]);
label196:
  if (0 == 0)
    goto label203;
label199:
  p[64] += 1;
label203:
  p[64] *= 2;
label207:
  rp += 13;
  //  label209:	if(1 != 0) goto labelp[rp+6];
label212:
  output(p[209]);
  //  label214:	if(1 != 0) goto label221;
label217:
  p[64] += 1;
label221:
  p[64] *= 2;
label225:
  rp += -4;
label227:
  p[rp - 1] = (40 == 39) ? 1 : 0;
label231:
  if (p[1013] != 0)
    goto label241;
label234:
  p[64] += 1;
label238:
  if (1 != 0)
    goto label243;
label241:
  output(p[227]);
label243:
  p[64] *= 2;
label247:
  rp += 5;
label249:
  p[rp - 1] = 41 * 1;
label253:
  p[63] = (p[1018] == 40) ? 1 : 0;
label257:
  if (p[63] != 0)
    goto label267;
label260:
  p[64] += 1;
label264:
  if (0 == 0)
    goto label269;
label267:
  output(p[249]);
label269:
  p[64] *= 2;
label273:
  rp += -28;
label275:
  p[63] = p[rp + 10] * 1;
label279:
  p[63] = (p[63] == 30) ? 1 : 0;
label283:
  if (p[63] != 0)
    goto label291;
label286:
  output(p[275]);
label288:
  if (0 == 0)
    goto label295;
label291:
  p[64] += 1;
label295:
  p[64] *= 2;
label299:
  rp += 24;
label301:
  p[rp - 4] = (42 < 43) ? 1 : 0;
label305:
  if (p[1011] != 0)
    goto label313;
label308:
  output(p[301]);
label310:
  if (0 == 0)
    goto label317;
label313:
  p[64] += 1;
label317:
  p[64] *= 2;
label321:
  rp += -8;
label323:
  p[rp + 3] = (43 == 43) ? 1 : 0;
label327:
  if (p[1010] != 0)
    goto label335;
label330:
  output(p[323]);
label332:
  if (1 != 0)
    goto label339;
label335:
  p[64] += 1;
label339:
  p[64] *= 2;
label343:
  rp += -8;
label345:
  p[63] = (p[rp + 4] < 34) ? 1 : 0;
label349:
  if (p[63] != 0)
    goto label359;
label352:
  p[64] += 1;
label356:
  if (0 == 0)
    goto label361;
label359:
  output(p[345]);
label361:
  p[64] *= 2;
label365:
  rp += 26;
  //  label367:	if(0 == 0) goto labelp[rp+3];
label370:
  output(p[367]);
label372:
  if (0 == 0)
    goto label379;
label375:
  p[64] += 1;
label379:
  p[64] *= 2;
label383:
  rp += -21;
label385:
  p[63] = 1 * p[rp - 2];
label389:
  p[63] = (p[63] == 37) ? 1 : 0;
label393:
  if (p[63] != 0)
    goto label399;
label396:
  if (1 != 0)
    goto label405;
label399:
  output(p[385]);
label401:
  p[64] += 1;
label405:
  p[64] *= 2;
label409:
  rp += 2;
label411:
  p[63] = (p[rp - 2] < 30) ? 1 : 0;
label415:
  if (p[63] != 0)
    goto label427;
label418:
  output(p[411]);
label420:
  p[64] += 1;
label424:
  if (1 != 0)
    goto label427;
label427:
  p[64] *= 2;
label431:
  rp += 4;
label433:
  p[63] = (36 == p[rp - 5]) ? 1 : 0;
label437:
  if (p[63] != 0)
    goto label447;
label440:
  p[64] += 1;
label444:
  if (0 == 0)
    goto label449;
label447:
  output(p[433]);
label449:
  p[64] *= 2;
label453:
  rp += -13;
label455:
  p[63] = p[rp + 8] + 0;
label459:
  p[63] = (p[63] == 41) ? 1 : 0;
label463:
  if (p[63] != 0)
    goto label469;
label466:
  if (0 == 0)
    goto label475;
label469:
  output(p[455]);
label471:
  p[64] += 1;
label475:
  p[64] *= 2;
label479:
  rp += 14;
label481:
  p[rp + 3] = (44 < 43) ? 1 : 0;
label485:
  if (p[1014] != 0)
    goto label495;
label488:
  p[64] += 1;
label492:
  if (0 == 0)
    goto label497;
label495:
  output(p[481]);
label497:
  p[64] *= 2;
label501:
  rp += 2;
label503:
  if (p[rp + 8] != 0)
    goto label511;
label506:
  output(p[503]);
label508:
  if (0 == 0)
    goto label515;
label511:
  p[64] += 1;
label515:
  p[64] *= 2;
label519:
  rp += 14;
label521:
  if (p[rp - 6] == 0)
    goto label527;
label524:
  if (1 != 0)
    goto label533;
label527:
  output(p[521]);
label529:
  p[64] += 1;
label533:
  p[64] *= 2;
label537:
  rp += -29;
label539:
  p[63] = (31 < p[rp + 8]) ? 1 : 0;
label543:
  if (p[63] != 0)
    goto label551;
label546:
  output(p[539]);
label548:
  if (1 != 0)
    goto label555;
label551:
  p[64] += 1;
label555:
  p[64] *= 2;
label559:
  rp += 28;
  //  label561:	if(0 == 0) goto labelp[rp+1];
label564:
  p[64] += 1;
  //  label568:	if(0 == 0) goto label573;
label571:
  output(p[561]);
label573:
  p[64] *= 2;
label577:
  rp += -3;
label579:
  p[rp - 4] = 45 + 0;
label583:
  p[63] = (p[1019] == 45) ? 1 : 0;
label587:
  if (p[63] != 0)
    goto label595;
label590:
  output(p[579]);
  //  label592:	if(1 != 0) goto label599;
label595:
  p[64] += 1;
label599:
  p[64] *= 2;
label603:
  rp += -23;
label605:
  p[63] = (p[rp + 2] == 39) ? 1 : 0;
label609:
  if (p[63] != 0)
    goto label615;
  //  label612:	if(1 != 0) goto label621;
label615:
  output(p[605]);
label617:
  p[64] += 1;
label621:
  p[64] *= 2;
label625:
  rp += 15;
label627:
  p[63] = (32 == p[rp - 9]) ? 1 : 0;
label631:
  if (p[63] != 0)
    goto label643;
label634:
  output(p[627]);
label636:
  p[64] += 1;
label640:
  if (1 != 0)
    goto label643;
label643:
  p[64] *= 2;
label647:
  rp += -9;
label649:
  p[63] = (33 < p[rp + 0]) ? 1 : 0;
label653:
  if (p[63] != 0)
    goto label659;
label656:
  if (0 == 0)
    goto label665;
label659:
  output(p[649]);
label661:
  p[64] += 1;
label665:
  p[64] *= 2;
label669:
  rp += 7;
label671:
  p[rp + 2] = 46 + 0;
label675:
  p[63] = (p[1015] == 49) ? 1 : 0;
label679:
  if (p[63] != 0)
    goto label689;
label682:
  p[64] += 1;
label686:
  if (0 == 0)
    goto label691;
label689:
  output(p[671]);
label691:
  p[64] *= 2;
label695:
  rp += -8;
label697:
  p[63] = 0 + p[rp - 3];
label701:
  p[63] = (p[63] == 35) ? 1 : 0;
label705:
  if (p[63] != 0)
    goto label711;
label708:
  if (1 != 0)
    goto label717;
label711:
  output(p[697]);
label713:
  p[64] += 1;
label717:
  p[64] *= 2;
label721:
  rp += 12;
label723:
  p[63] = p[rp - 9] * 1;
label727:
  p[63] = (p[63] == 31) ? 1 : 0;
label731:
  if (p[63] != 0)
    goto label741;
label734:
  p[64] += 1;
label738:
  if (1 != 0)
    goto label743;
label741:
  output(p[723]);
label743:
  p[64] *= 2;
label747:
  rp += -27;
label749:
  p[63] = 1 * p[rp + 10];
label753:
  p[63] = (p[63] == 31) ? 1 : 0;
label757:
  if (p[63] != 0)
    goto label769;
label760:
  output(p[749]);
label762:
  p[64] += 1;
label766:
  if (1 != 0)
    goto label769;
label769:
  p[64] *= 2;
label773:
  rp += 9;
label775:
  p[63] = 0 + p[rp + 1];
label779:
  p[63] = (p[63] == 31) ? 1 : 0;
label783:
  if (p[63] != 0)
    goto label791;
label786:
  output(p[775]);
label788:
  if (0 == 0)
    goto label795;
label791:
  p[64] += 1;
label795:
  p[64] *= 2;
label799:
  rp += 28;
label801:
  if (p[rp - 7] == 0)
    goto label809;
label804:
  output(p[801]);
label806:
  if (1 != 0)
    goto label813;
label809:
  p[64] += 1;
label813:
  p[64] *= 2;
  //  label817:	if(1 != 0) goto labelp[rp-4];
label820:
  if (0 == 0)
    goto label829;
label823:
  output(p[817]);
label825:
  p[64] += 1;
label829:
  p[64] *= 2;
label833:
  rp += -15;
label835:
  p[rp - 2] = 47 * 1;
label839:
  p[63] = (p[1010] == 47) ? 1 : 0;
label843:
  if (p[63] != 0)
    goto label851;
label846:
  output(p[835]);
label848:
  if (0 == 0)
    goto label855;
label851:
  p[64] += 1;
label855:
  p[64] *= 2;
label859:
  rp += 5;
label861:
  if (p[rp + 3] != 0)
    goto label867;
label864:
  if (0 == 0)
    goto label873;
label867:
  output(p[861]);
label869:
  p[64] += 1;
label873:
  p[64] *= 2;
label877:
  rp += -12;
label879:
  p[63] = p[rp + 0] + 0;
label883:
  p[63] = (p[63] == 39) ? 1 : 0;
label887:
  if (p[63] != 0)
    goto label895;
label890:
  output(p[879]);
label892:
  if (1 != 0)
    goto label899;
label895:
  p[64] += 1;
label899:
  output(p[64]);
label901:
  return; // HALT
label902:
  p[rp + 1] = 0 + 27;
label906:
  p[rp + 0] = 913 * 1;
label910:
  if (0 == 0)
    goto label920;
label913:
  p[rp + 1] += 47951;
label917:
  output(p[rp + 1]);
label919:
  return; // HALT
label920:
  rp += 3;
label922:
  p[63] = (p[rp - 2] < 3) ? 1 : 0;
label926:
  if (p[63] != 0)
    goto label962;
label929:
  p[rp + 1] = p[rp - 2] + -1;
label933:
  p[rp + 0] = 0 + 940;
label937:
  if (1 != 0)
    goto label920;
label940:
  p[rp - 1] = p[rp + 1] + 0;
label944:
  p[rp + 1] = p[rp - 2] + -3;
label948:
  p[rp + 0] = 0 + 955;
label952:
  if (0 == 0)
    goto label920;
label955:
  p[rp - 2] = p[rp + 1] + p[rp - 1];
label959:
  if (1 != 0)
    goto label966;
label962:
  p[rp - 2] *= 1;
label966:
  rp += -3;
  //  label968:	if(1 != 0) goto labelp[rp+0];
}
